extends ../_template

block variables
  - var title       = 'Как вставить адаптивное видео на сайт'
  - var description = 'В мире адаптивных и гибких макетов в Интернете, один единственный медиатип стоит на пути к идеальной гармонии - видео. Существует множество способов отображения видео на вашем сайте и сейчас мы рассмотрим лучшие из них.'
  - var ogtitle     = 'Как вставить адаптивное видео на сайт'
  - var ogimage     = 'assets/img/articles/2020-03-26/top-img.jpg'

  //- article variables
  - var imgPath             = 'assets/img/articles/2020-03-26/top-img.jpg'
  - var imgAlt              = 'you tube'

  - var articleTitle        = 'Как вставить адаптивное видео на сайт'
  - var articleDate         = '2020-03-26'

  - var originArticleTitle  = 'Fluid Width Video'
  - var originArticleLink   = 'https://css-tricks.com/fluid-width-video/'

  - var articleWriter       = 'Chris Coyier'

  //- *** don't forget to fix hashtags! ***

block content
  .main-wrap#main-wrap
    include ../sections/aside

    //begin content
    .main.article-page
      include ../elements/burger
      include ../elements/scroll-2-top

      .container
        article.article
          //begin article__header
          header.article__header
            .article__top-img
              img(src= imgPath alt= imgAlt)

            .article__info
              h1.article__title #{articleTitle}
              .article__date
                +svg('calendar')
                time(datetime= articleDate) #{articleDate}

              //begin article__origin
              .article__origin
                span.article__origin-text Перевод статьи:
                a(href= originArticleLink target="_blank" rel="nofollow noopener noreferrer").article__origin-article #{originArticleTitle}
              .article__origin(title='The author of the article')
                span.article__origin-text Автор:
                span.article__origin-author #{articleWriter}
              //end article__origin

              //begin article__tags
              .article__tags
                span.article__tag css
                span.article__tag aspect ratio
                span.article__tag video
                span.article__tag responsive
              //end article__tags
          //end article__header

          //begin article__body
          .article__body.article-body
            p В мире адаптивных и гибких макетов в Интернете, <b>один единственный медиа тип</b> стоит на пути к идеальной гармонии - видео. Существует множество способов отображения видео на вашем сайте. Возможно, вы самостоятельно размещаете видео и проигрываете его через тег <i class='highlight-text'>video</i>. Возможно, вы используете YouTube, Vimeo или другой видео сервис, который предоставляет  <i class='highlight-text'>iframe</i> для отображения видео. Давайте рассмотрим, как сделать их адаптивными, сохраняя при этом соответствующую высоту  и не нарушая пропорции.
            p Очень часто, при встраивании видео, <i class='highlight-text'>width</i> и <i class='highlight-text'>height</i> объявлены прямо в HTML:
            pre
              code.language-html.
                &lt;video width="400" height="300" controls ... >&lt;/video>

                &lt;iframe width="400" height="300" ... >&lt;/iframe>

                &lt;!-- maybe even super old school -->
                &lt;object width="400" height="300" ... />
                &lt;embed width="400" height="300" ... />

            p Угадай, что не так?<br>Объявление статической ширины - это не очень хорошая идея на сайте с изменяющейся шириной. Что если родительский контейнер для этого видео сжимается меньше чем объявленные  400px? В этом случае у нас все поломается и, будет выглядеть некрасиво и нелепо.
            .article-body__img
              img(src="assets/img/articles/2020-03-26/01.jpg" alt="screenshot")

            p Что же делать в подобной ситуации?
            pre
              code.language-html.
                &lt;video width="100%" ... >&lt;/video>

            p Если вы используете стандартное видео HTML5, это позволит видео соответствовать ширине контейнера. Если вы используете этот подход, важно удалить объявление <i class='highlight-text'>height</i>, чтобы соотношение сторон видео сохранялось по мере его увеличения и сжатия по ширине, чтобы не получить «черные полосы» для заполнения пустого пространства (в отличие от изображений, само видео сохраняет свое соотношение сторон независимо от размера элемента).
            p Вы можете переопределить эти стили через CSS (и не беспокоиться о том, что объявлено в HTML) следующим образом:
            pre
              code.language-css.
                video {
                  /* override other styles to make responsive */
                  width: 100%    !important;
                  height: auto   !important;
                }
            .article-body__img
              iframe(src="https://codepen.io/Odinokun/embed/RwPqQWN?height=500&amp;default-tab=result&amp;embed-version=2" height="500" style="width: 100%;")

            h2.article-body__title Iframe-видео (YouTube, Vimeo и т.д.)
            p Наш маленький трюк описанный выше не поможет нам при работе с видео, которое добавлено через <i class='highlight-text'>iframe</i>. Принудительное увеличение ширины до 100% эффективно, но когда мы устанавливаем <i class='highlight-text'>height: auto;</i>, мы получаем статическую высоту 150px, которая слишком приземистая для большинства видео. Практически все браузеры будут отображать теги <i class='highlight-text'>iframe</i>, <i class='highlight-text'>canvas</i>, <i class='highlight-text'>embed</i> и <i class='highlight-text'>object</i> как 300px × 150px, если не указано иное. Даже если этого нет в пользовательской таблице стилей.
            .article-body__img
              iframe(src="https://codepen.io/Odinokun/embed/RwPqQaN?height=500&amp;default-tab=result&amp;embed-version=2" height="500" style="width: 100%;")

            p К счастью, здесь есть несколько возможных решений. Один из них был впервые предложен Тьерри Кобленцем и представлен в A List Apart в 2009 году:  <a href="http://www.alistapart.com/articles/creating-intrinsic-ratios-for-video/" target="_blank" rel="nofollow noopener noreferrer">Создание внутренних соотношений для видео</a>. Используя эту технику, вы оборачиваете видео в другой элемент с внутренним соотношением сторон, а затем размещаете видео в этом абсолютном положении. Это дает нам резиновую ширину с “умной” высотой.
            pre
              code.language-html.
                &lt;div class="videoWrapper">
                  &lt;iframe width="560" height="349" src="http://www.youtube.com/embed/n_dZNLr2cME?rel=0&hd=1" frameborder="0" allowfullscreen>&lt;/iframe>
                &lt;/div>
            pre
              code.language-css.
                .videoWrapper {
                  position: relative;
                  padding-bottom: 56.25%; /* 16:9 */
                  height: 0;
                }
                .videoWrapper iframe {
                  position: absolute;
                  top: 0;
                  left: 0;
                  width: 100%;
                  height: 100%;
                }
            .article-body__img
              iframe(src="https://codepen.io/Odinokun/embed/QWbJQKM?height=500&amp;default-tab=result&amp;embed-version=2" height="500" style="width: 100%;")
            p Существует еще один “хитрый” вариант”, который позволяет регулировать соотношение сторон прямо из HTML:
            pre
              code.language-html.
                &lt;div class="videoWrapper" style="--aspect-ratio: 3 / 4;">
                  &lt;iframe ...>
            pre
              code.language-css.
                .videoWrapper {
                  ...
                  /* falls back to 16/9, but otherwise uses ratio from HTML */
                  padding-bottom: calc(var(--aspect-ratio, .5625) * 100%);
                }
            p Иногда можно встретить олдскульный вариант встраивания видео в котором используется теги <i class='highlight-text'>object</i> и <i class='highlight-text'>embed</i>, так что если вы стараетесь поддерживать все возможные варианты - добавьте для них обертку:
            pre
              code.language-css.
                .videoWrapper iframe,
                .videoWrapper embed,
                .videoWrapper object { }

            h2.article-body__title Но, но ... пропорции, легаси контент, пользователи не технари и т.д.
            p Вышеприведенная техника очень хороша, но имеет несколько возможных ограничений:
            ol
              li Для ее применения требуется элемент-обертка, поэтому невозможно прямое копирование/вставка кода с YouTube. Пользователи должны быть опытными.
              li Если у вас есть легаси контент, и вы хотите сделать новый дизайн более отзывчивым, то все старые видео будут требовать корректировку HTML.
              li Все видео должны иметь одинаковое соотношение сторон. В противном случае они будут переведены в другое соотношение сторон, и вы получите «черные полосы заполнения». Или же вам понадобится инструмент с определенным набором классов которые вы будете применять для регулировки соотношения сторон, что тоже является дополнительной сложностью.
            p Если к вам применимо любое из этих ограничений, то вы можете использовать JavaScript решение.
            p Представьте себе: при загрузке страницы все видео просматриваются и их соотношение сторон сохраняется. Каждый раз, когда размер окна изменяется, размер всех видео изменяется, чтобы заполнить доступную ширину и сохранить их соотношение сторон. Используя  jQuery, это выглядит так:

            pre
              code.language-js.
                // Find all YouTube videos
                // Expand that selector for Vimeo and whatever else
                var $allVideos = $("iframe[src^='//www.youtube.com']"),

                  // The element that is fluid width
                  $fluidEl = $("body");

                // Figure out and save aspect ratio for each video
                $allVideos.each(function() {

                  $(this)
                    .data('aspectRatio', this.height / this.width)

                    // and remove the hard coded width/height
                    .removeAttr('height')
                    .removeAttr('width');

                });

                // When the window is resized
                $(window).resize(function() {

                  var newWidth = $fluidEl.width();

                  // Resize all videos according to their own aspect ratio
                  $allVideos.each(function() {

                    var $el = $(this);
                    $el
                      .width(newWidth)
                      .height(newWidth * $el.data('aspectRatio'));

                  });

                // Kick off one resize to fix all videos on page load
                }).resize();

            h2.article-body__title А вот вариант с плагином FitVids.js
            p Кроме того, что <a href="https://github.com/davatron5000/FitVids.js" target="_blank" rel="nofollow noopener noreferrer">FitVids.js</a>, отслеживает изменения размеров, он перебирает все видео и добавляет соотношение сторон, позволяющее использовать HTML-оболочку и необходимый CSS. Это намного эффективнее, чем привязка к обработчику изменения размера окна!
            .article-body__img
              iframe(src="https://codepen.io/Odinokun/embed/gOpQeMo?height=500&amp;default-tab=result&amp;embed-version=2" height="500" style="width: 100%;")

            h2.article-body__title тот же плагин на чистом JS
            p В наши дни jQuery не в фаворе. К счастью, у Дэйва есть версия Vanilla JS:
            .article-body__img
              iframe(src="https://codepen.io/Odinokun/embed/RwPqMGZ?height=500&amp;default-tab=result&amp;embed-version=2" height="500" style="width: 100%;")
          //end article__body

          include ../sections/article-footer
    //end content
